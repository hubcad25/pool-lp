"""
Orchestrateur du workflow d'optimisation du draft

Ex√©cute les 3 √©tapes dans l'ordre:
1. Optimisation: G√©n√®re 5 rosters avec diff√©rents profils de risque
2. Simulation: Simule 5,000 saisons Monte Carlo pour chaque roster
3. Comparaison: Analyse comparative et recommandations

Usage:
    python run_draft_optimization.py
"""

import subprocess
import sys
from pathlib import Path
import time

# Configuration
SCRIPT_DIR = Path(__file__).parent

SCRIPTS = [
    ("optimize_draft.py", "Optimisation des rosters"),
    ("simulate_rosters.py", "Simulations Monte Carlo"),
    ("compare_rosters.py", "Analyse comparative")
]


def run_script(script_name, description):
    """
    Ex√©cute un script Python et g√®re les erreurs

    Args:
        script_name: Nom du fichier script
        description: Description pour affichage

    Returns:
        True si succ√®s, False si erreur
    """
    script_path = SCRIPT_DIR / script_name

    print("\n" + "="*80)
    print(f"√âTAPE: {description}")
    print(f"Script: {script_path}")
    print("="*80)

    start_time = time.time()

    try:
        # Ex√©cuter le script
        result = subprocess.run(
            [sys.executable, str(script_path)],
            check=True,
            capture_output=False,  # Afficher output en temps r√©el
            text=True
        )

        elapsed = time.time() - start_time
        print(f"\n‚úì {description} termin√© en {elapsed:.1f}s")
        return True

    except subprocess.CalledProcessError as e:
        print(f"\n‚úó Erreur lors de l'ex√©cution de {script_name}")
        print(f"Code de retour: {e.returncode}")
        return False

    except Exception as e:
        print(f"\n‚úó Erreur inattendue: {e}")
        return False


def main():
    """Ex√©cution principale - orchestre les 3 √©tapes"""

    print("\n" + "="*80)
    print("WORKFLOW COMPLET D'OPTIMISATION DU DRAFT")
    print("="*80)
    print("\nCe workflow ex√©cute 3 √©tapes:")
    print("  1. Optimisation: G√©n√®re 5 rosters (ultra_conservative ‚Üí aggressive)")
    print("  2. Simulation:   Simule 5,000 saisons pour chaque roster")
    print("  3. Comparaison:  Analyse comparative et recommandations")
    print("\n")

    input("Appuyez sur Entr√©e pour d√©marrer...")

    # Ex√©cuter chaque script dans l'ordre
    start_time = time.time()
    success_count = 0

    for script_name, description in SCRIPTS:
        success = run_script(script_name, description)

        if success:
            success_count += 1
        else:
            print("\n" + "="*80)
            print("WORKFLOW INTERROMPU - Erreur lors d'une √©tape")
            print("="*80)
            sys.exit(1)

    # R√©sum√© final
    total_time = time.time() - start_time

    print("\n\n" + "="*80)
    print("WORKFLOW TERMIN√â AVEC SUCC√àS")
    print("="*80)
    print(f"\n‚úì {success_count}/{len(SCRIPTS)} √©tapes compl√©t√©es")
    print(f"‚úì Temps total: {total_time:.1f}s ({total_time/60:.1f} minutes)")

    print("\nüìä R√âSULTATS:")
    print("  - Rosters optimaux: data/02_draft_optimization/rosters/")
    print("  - Simulations:      data/02_draft_optimization/simulations/")
    print("  - Rapport:          data/02_draft_optimization/comparison_report.txt")

    print("\nüí° PROCHAINES √âTAPES:")
    print("  1. Lire le rapport de comparaison")
    print("  2. Choisir une strat√©gie selon votre tol√©rance au risque")
    print("  3. Utiliser le roster correspondant pour votre draft")
    print("  4. Ajuster avec vos 20 changements pendant la saison")

    print("\n" + "="*80)


if __name__ == "__main__":
    main()
